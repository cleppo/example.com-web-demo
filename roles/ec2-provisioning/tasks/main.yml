---
- name: launch or terminate instances
  ec2:
    assign_public_ip: "{{ ec2_assign_public_ip | default('no') }}"
#    exact_count: "{{ ec2_count | default(1) }}"
    exact_count: "{{ ec2_count }}"
    count_tag: "{{ aws_resource_tags }}"
    ebs_optimized: "{{ ec2_ebs_optimized | default(false) }}"
    groups: "{{ ec2_groups }}"
    instance_type: "{{ ec2_instance_type | default('t2.micro') }}"
    instance_profile_name:  "{{ ec2_instance_profile_name | default ('')}}"
    user_data: "{{ ec2_user_data | default (omit) }}"
    image: "{{ ec2_base_image }}"
    key_name: "{{ ec2_key_name }}"
    monitoring: "{{ ec2_monitoring | default('yes') }}"
    region: "{{ region }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    instance_tags: "{{ aws_resource_tags }}"
    #state: "{{ state | default('present') }}"
    volumes: "{{ ec2_volumes | default(omit) }}"
  register: ec2
  
- name: Add new instance to host group
  add_host: hostname="{{ item.private_ip }}" groupname=ec2_launched ec2_id="{{ item.id }}"
  with_items: "{{ ec2.instances }}"

- name: Wait for SSH to come up
  wait_for: host="{{ item.private_ip }}" port=22 delay=60 timeout=320 state=started
  with_items: "{{ ec2.instances }}"  
#  ^^^^   This currently hangs when hosts are being terminated (reducing 'exact_count').  I need to set this item list to only match hosts that are still running, or to skip when the count is equal to or less than the current number of hosts.

- name: set fact ec2_ami_instance_id
  set_fact: ec2_ami_instance_id="{{ ec2.instance_ids[0] }}"
  when: ec2 is defined

- meta: refresh_inventory

- name: accept new ssh fingerprints  #  TODO - Make this step clean up duplicate entries (from multiple runs creating the same host).  Perhaps a lineinfile task with syntax to replace the line with the existing IP.
#  shell: ssh-keyscan "{{ item.private_ip }}", "{{ item.private_ip }}" >> ~/.ssh/known_hosts
  shell: ssh-keyscan "{{ item.private_ip }}" >> ~/.ssh/known_hosts
  with_items: "{{ ec2.instances }}"

#- name: Allocating elastic IP 
#  local_action: ec2_eip
#                in_vpc=yes
#                device_id="{{ item.id }}"
#                reuse_existing_ip_allowed=yes
#                state=present
#                region=us-west-2
#  with_items: "{{ ec2.instances }}"
#  register: eip
